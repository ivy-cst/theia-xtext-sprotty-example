/*
 * generated by Xtext 2.16.0
 */
package io.typefox.examples.theia.states.validation

import com.google.common.collect.Multimaps
import io.typefox.examples.theia.states.states.StateMachine
import org.eclipse.xtext.validation.Check

import static io.typefox.examples.theia.states.states.StatesPackage.Literals.*

/**
 * This class contains custom validation rules.
 */
class StatesValidator extends AbstractStatesValidator {

	public static val DISCOURAGED_NAME = 'discouraged-name';

	@Check
	def checkState(io.typefox.examples.theia.states.states.State state) {
		val event2transition = Multimaps.index(state.transitions, [event.name ?: ''])
		event2transition.keySet.forEach [ name |
			val transitionsWithCommonName = event2transition.get(name)
			if (transitionsWithCommonName.size > 1) 
				transitionsWithCommonName.forEach [
					error('''Multiple transitions on event «name»''', it, TRANSITION__EVENT)
			]
		]
	}
	
	@Check
	def checkUniqueNames(StateMachine sm) {
		val name2state = Multimaps.index(sm.states, [name ?: ''])
		name2state.keySet.forEach [ name |
			val statesWithCommonName = name2state.get(name)
			if (statesWithCommonName.size > 1) 
				statesWithCommonName.forEach [
					error('''Multiple states named '«name»'«»''', it, STATE__NAME)
			]
		]
		val name2event = Multimaps.index(sm.events, [name ?: ''])
		name2event.keySet.forEach [ name |
			val eventsWithCommonName = name2event.get(name)
			if (eventsWithCommonName.size > 1) 
				eventsWithCommonName.forEach [
					error('''Multiple events named '«name»'«»''', it, EVENT__NAME)
			]
		]
	}

	@Check
	def checkName(StateMachine it) {
		if (!name.nullOrEmpty) {
			if (Character.isLowerCase(name.charAt(0))) {
				warning('State machine name should start with an upper case.', it, STATE_MACHINE__NAME, DISCOURAGED_NAME)
			}
		}
	}

}
